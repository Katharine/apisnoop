stages:
  - binaries
  - containers

image: docker:latest

build-initializer:
  stage: binaries
  image:
    name: 'gcr.io/cloud-builders/go:alpine'
    entrypoint: [""]
  script:
    # - uname -a ; free -m ; df; ip addr ; ip route
    - export CI_GITLAB_FQDN=$(echo $CI_PROJECT_URL | sed sXhttps\\://XX | sed sX\/.*\$XX)
    # TODO: copy source kubernetes-tproxy into /go/src/gitlab.ii.coop
    - ln -s /builds /go/src/$CI_GITLAB_FQDN
    - export GOPATH=/go
    - export PATH=$PATH:/usr/local/go/bin
    - cd /go/src/$CI_GITLAB_FQDN/$CI_PROJECT_PATH
    - go get ./...
    - go install ./cmd/tproxy-initializer/
    - go install ./cmd/tproxy-podwatch/
    - cd /go/src/$CI_GITLAB_FQDN/$CI_PROJECT_PATH
    - mkdir -p gopath/bin/
    - cp /go/bin/tproxy-initializer gopath/bin/
    - cp /go/bin/tproxy-podwatch gopath/bin/
    - env
    # # Install tmate from alpine testing
    # - apk add tmate --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted
    # - apk add --no-cache openssh
    # # configure tmate to use pair.ii.coop
    # - echo 'set -g tmate-server-host pair.ii.coop' > $HOME/.tmate.conf
    # - echo 'set -g tmate-server-port 22' >> $HOME/.tmate.conf
    # - echo 'set -g tmate-server-rsa-fingerprint   "f9:af:d5:f2:47:8b:33:53:7b:fb:ba:81:ba:37:d3:b9"' >> $HOME/.tmate.conf
    # - echo 'set -g tmate-server-ecdsa-fingerprint   "32:44:b3:bb:b3:0a:b8:20:05:32:73:f4:9a:fd:ee:a8"' >> $HOME/.tmate.conf
    # - echo 'set -g tmate-identity ""' >> $HOME/.tmate.conf
    # # Get build deps for alpine and build tmate from src
    # - apk add --no-cache openssh alpine-sdk automake autoconf libevent-dev ncurses-dev msgpack-c-dev libssh-dev
    # - cd /root
    # - git clone https://github.com/nviennot/tmate
    # - cd tmate ; ./autogen.sh && ./configure && make install
    # - ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''
    # - tmate -S /tmp/tmate.sock new-session -d
    # - tmate -S /tmp/tmate.sock wait tmate-ready
    # - tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
    # - sleep 99999999
  artifacts:
    paths:
    - gopath/bin/tproxy-initializer
    - gopath/bin/tproxy-podwatch

contain-sidecar:
  stage: containers
  script:
    - cd sidecar
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --pull -t "tproxy-sidecar:$CI_COMMIT_REF_SLUG" .
    - docker push "tproxy-sidecar:$CI_COMMIT_REF_SLUG"

contain-initializer:
  stage: containers
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -f Dockerfile-initializer --pull -t "$CI_REGISTRY_IMAGE/initializer:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE/initializer:$CI_COMMIT_REF_SLUG"

contain-podwatch:
  stage: containers
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -f Dockerfile-podwatch --pull -t "$CI_REGISTRY_IMAGE/podwatch:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE/podwatch:$CI_COMMIT_REF_SLUG"

